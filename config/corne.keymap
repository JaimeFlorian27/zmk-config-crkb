/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "Homerow mods left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <18 19 20 21 22 23 39 40 41 6 7 8 9 10 11 34 35 33 31 30 32 36 37 38>;
        };
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "Homerow mods right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <24 12 0 25 26 3 2 14 1 13 15 27 17 5 4 28 16 29 36 37 38 39 40 41>;
        };
        btd: btd {
            compatible = "zmk,behavior-tap-dance";
            label = "Bluetooth tap dance";
            #binding-cells = <0>;
            bindings = <&bt BT_NXT>, <&bt BT_PRV>, <&none>, <&bt BT_CLR>;
        };
        gtm: gtm {
            compatible = "zmk,behavior-mod-morph";
            label = "Grave tilde modifier";
            bindings = <&kp GRAVE>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&kp CAPSLOCK>;
        };
        backspace: backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
        htl_nav: htl {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold tap layer";
            bindings = <&mo>, <&tap_dance_nav>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <180>;
        };
        terminal_nav: terminal_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "TERMINAL_NAV";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <18 19 21 20>;
        };
        tap_dance_nav: tap_dance_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NAV";
            #binding-cells = <0>;
            bindings = <&sl 3>, <&tog 3>;

            tapping-term-ms = <150>;
        };
        htl_num: htl_num {
            compatible = "zmk,behavior-hold-tap";
            label = "HTL_NUM";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };
        tap_dance_num: tap_dance_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NUM";
            #binding-cells = <0>;
            bindings = <&htl_nav 1 3>, <&tog 1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        gaming_combo {
            bindings = <&tog 5>;
            key-positions = <40 37>;
            require-prior-idle-ms = <260>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <16 19>;
            require-prior-idle-ms = <260>;
            layers = <0 1 2 4 5>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <4 7>;
            require-prior-idle-ms = <260>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <28 31>;
            require-prior-idle-ms = <260>;
            layers = <0 1 2 4 5>;
        };

        l_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 20>;
            require-prior-idle-ms = <260>;
        };

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <14 21>;
            require-prior-idle-ms = <260>;
        };

        l_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <13 22>;
            require-prior-idle-ms = <260>;
        };

        r_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <27 32>;
            require-prior-idle-ms = <260>;
        };

        r_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <26 33>;
            require-prior-idle-ms = <260>;
        };

        r_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <34 25>;
            require-prior-idle-ms = <260>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <5 6>;
            require-prior-idle-ms = <260>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <3 8>;
            require-prior-idle-ms = <260>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <2 9>;
            require-prior-idle-ms = <260>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <31 32>;
            require-prior-idle-ms = <260>;
        };

        l_brace_nav {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <16 19>;
            require-prior-idle-ms = <260>;
            layers = <3>;
        };

        r-brace-nav {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <28 31>;
            require-prior-idle-ms = <260>;
            layers = <3>;
        };
    };

    macros {
        tmux_v_split: tmux_v_split {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp BACKSLASH>;
            label = "TMUX_V_SPLIT";
        };
        tmux_h_spilt: tmux_h_spilt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp MINUS>;
            label = "TMUX_H_SPILT";
        };
        tmux_zoom: tmux_zoom {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp Z>;
            label = "TMUX_ZOOM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q            &kp W            &kp F              &kp P              &kp B        &kp J    &kp L         &kp U         &kp Y            &kp SEMICOLON  &kp BACKSPACE
&kp GRAVE  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LCTRL S       &hml LEFT_SHIFT T  &kp G        &kp M    &hmr RSHFT N  &hmr RCTRL E  &hmr LEFT_ALT I  &hmr RGUI O    &kp SQT
&kp TILDE  &kp Z            &kp X            &terminal_nav 2 C  &kp D              &kp V        &kp K    &kp H         &kp COMMA     &kp DOT          &kp FSLH       &kp ESC
                                             &shift_caps        &htl_nav 3 3       &kp SPACE    &kp RET  &htl_num 1 1  &mo 4
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCLAMATION      &kp AT_SIGN             &kp HASH             &kp DOLLAR           &kp PERCENT         &kp LCTRL     &kp AMPERSAND  &kp ASTERISK           &kp F9            &kp F10           &kp DELETE
&trans  &hml LMETA NUMBER_1  &hml LEFT_ALT NUMBER_2  &hml LCTRL NUMBER_3  &hml LSHFT NUMBER_4  &kp N5              &kp NUMBER_6  &hmr RSHFT N7  &hmr RIGHT_CONTROL N8  &hmr LEFT_ALT N9  &hmr LEFT_GUI N0  &kp F11
&btd    &trans               &trans                  &kp C_VOL_DN         &kp C_VOLUME_UP      &kp K_CALCULATOR    &gtm          &trans         &trans                 &trans            &trans            &kp F12
                                                     &trans               &trans               &kp SPACE           &kp RET       &trans         &kp RALT
            >;
        };

        terminal_nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LC(H)  &kp LC(J)  &kp LC(K)  &kp LC(L)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans     &trans     &trans  &trans
                        &trans  &trans  &trans    &trans     &trans     &trans
            >;
        };

        nav {
            bindings = <
&trans  &kp N1      &kp N2  &kp N3  &kp N4  &kp N5           &kp N6          &kp N7          &kp N8        &kp N9     &kp N0  &trans
&trans  &trans      &trans  &trans  &trans  &tmux_v_split    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &tmux_zoom  &trans  &trans  &trans  &tmux_h_spilt    &trans          &kp HOME        &kp END       &trans     &trans  &trans
                            &trans  &trans  &trans           &trans          &trans          &trans
            >;
        };

        function {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans   &trans   &trans   &trans  &trans  &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6   &kp F7   &kp F7   &kp F8  &kp F9  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F10  &kp F11  &kp F12  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans   &trans   &trans
            >;
        };

        gaming {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&kp LSHFT  &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp LALT
&kp LCTRL  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &trans  &trans  &trans    &trans  &trans  &kp LGUI
            >;
        };
    };
};
